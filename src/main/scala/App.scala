import preselection.Preselector
import CosineJacard.CosineJaccardCalc
object App {
  def main(args: Array[String]): Unit = {
    val p = new Preselector("Grundsätzlich ist künstliche Intelligenz der Versuch, menschenähnliche Entscheidungsstrukturen in einem ungewissen Umfeld zu modellieren. Daher einen Computer so zu programmieren, dass er selbständig Probleme lösen kann. Häufig wird jedoch auch eine nachgeahmte Intelligenz gemeint, wobei einfache Algorithmen „intelligentes Verhalten“ simulieren. In der Projektgruppe KIMAS (Künstliche Intelligenz in Multi-Agenten-Systemen) geht es darum, unterschiedliche Modifikationen der KI in bestehende Programme (Quake, Halflife) einzubinden. Allerdings sind diese Spiele nicht die einzigen, in denen Künstliche Intelligenz verwendet wird. Einige andere Spiele werde ich hier kurz vorstellen und auch darstellen, wie die Künstliche Intelligenz dort umgesetzt wurde. Ich habe mich für diese Spiele entschieden, da gerade bei „Creatures“ und „Black & White“ die künstliche Intelligenz teilweise durch wissenschaftliche Konzepte implementiert wurden. Das Tamagotchi ist eines der ersten weltweit erfolgreichen Spielzeuge, bei dem die KI ein wichtiges Element spielt. „Age of Empires II“ hingegen ist ein Beispiel dafür, wie einfache Regeln und Skripte verwendet werden, um KI zu simulieren. Das letzte Spiel in der Liste, „Quake III“, habe ich ausgesucht, da es von der Projektgruppe KIMAS als das Programm gewählt wurde, auf dem die Projektarbeit aufsetzen wird. Als erstes werde ich kurz erläutern, was Künstliche Intelligenz eigentlich ist und einige Möglichkeiten der Realisierung vorstellen. Als nächsten Schritt zeige ich dann, welche Anforderungen unterschiedliche Typen von Computerspielen oder Spiel-Modi an die KI stellen. Als letztes werde ich noch ein kurzes Fazit geben, wobei ich mich auch einen Ausblick darauf geben werde, was in den nächsten Jahren noch für die weitere Entwicklung im Bereich der Spiele-KI geplant ist. Künstliche Intelligenz, oder auch kurz KI genannt, ist eine Kombination von verschiedenen Wissenschaften, etwa Physiologie und Philosophie, aber auch naturwissenschaftlichen Fachgebieten. Künstliche Intelligenz ist ein sehr breites Thema, dass aus vielen verschiedenen Teilgebieten besteht. Doch die Gemeinsamkeit, welche die einzelnen Teile verbindet, ist das Ziel der Erschaffung von Maschinen, die denken können. Aber Intelligenz ist ein Begriff, der viele Definitionen besitzt. Deshalb gebe ich hier ein paar Definitionen an, und werde dann daraus schließen, was KI ist und was Maschinen können müssen, um intelligent zu sein. Unten stehen acht Definitionen, welche die KI beschreiben, aber nicht alle das Gleiche aussagen. Die Definitionen in der oberen Hälfte befassen sich mit dem Denkprozess und dem Denken allgemein, während es sich bei den Unteren um das Verhalten handelt. Ebenfalls sind die linke und rechte Seite voneinander verschieden. Auf der linken Seite sind Definitionen von menschlichem Denken und Handeln, wohingegen auf der rechte Seite eher das Ideal der Intelligenz dargestellt wird, nämlich die Rationalität. Wenn wir sagen, dass ein gegebenes Programm denkt wie ein Mensch, dann müssen wir zuerst das Denken des Menschen, oder besser die Art des menschlichen Denkens herausfinden. Dies können wir indem  wir versuchen unsere Gedanken wahrzunehmen und schauen, wie wir zu diesen Gedanken gelangen. Eine andere Möglichkeit dies herauszufinden wären z.B. psychologische Tests. Also ein Computer denkt menschlich, wenn nicht nur der In- und Output gleich sind wie beim Menschen, sondern auch der Prozess und die Art des Denkens. Newell und Simon versuchten, mit dem von ihnen entwickelten Programm The General Problem Solver nicht unbedingt die richtige Lösung zu finden, sondern sie wollten ein Programm entwickeln, das auf die gleiche Weise denkt wie der Mensch")
    p.calculateIDF
    val importantDocuments = p.getTopN(200)
    val cjc = new CosineJaccardCalc(importantDocuments)
    print(importantDocuments)
    //System.out.println("\nHallo:" + p.getTopNWords(10))
    //System.out.println(p.getTopNWords(1000))
    //System.out.println(p.getTopN(1))
  }
}